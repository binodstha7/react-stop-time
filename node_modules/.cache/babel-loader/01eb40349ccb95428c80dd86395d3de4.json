{"ast":null,"code":"import _toConsumableArray from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\workspace\\\\React\\\\stop-watch\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      timerCount: 0,\n      timerData: [],\n      isPaused: true\n    };\n    _this.splitTime = _this.splitTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleTimer = _this.toggleTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.stopWatch = setInterval(function () {\n        if (_this2.state.isPaused) {\n          return null;\n        } else {\n          _this2.setState({\n            timerCount: _this2.state.timerCount + 1\n          });\n        }\n      }, 1);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.stopWatch);\n    }\n  }, {\n    key: \"convertMillisecond\",\n    value: function convertMillisecond(ms) {\n      var milliSeconds = ms;\n      var seconds = milliSeconds / 1000;\n      var minutes = seconds / 60;\n      return \"\".concat(parseInt(minutes), \" : \").concat(parseFloat(seconds).toFixed(2));\n    }\n  }, {\n    key: \"splitTime\",\n    value: function splitTime() {\n      this.setState({\n        timerData: [this.state.timerCount].concat(_toConsumableArray(this.state.timerData))\n      });\n    }\n  }, {\n    key: \"toggleTimer\",\n    value: function toggleTimer() {\n      this.setState({\n        isPaused: !this.state.isPaused\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          timerCount = _this$state.timerCount,\n          timerData = _this$state.timerData,\n          isPaused = _this$state.isPaused;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Stop Timer Application\"), React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.convertMillisecond(timerCount)), React.createElement(\"button\", {\n        onClick: this.splitTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"split\"), React.createElement(\"button\", {\n        onClick: this.toggleTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, isPaused ? \"play\" : \"pause\")), timerData.map(function (timer, index) {\n        return React.createElement(\"p\", {\n          key: index.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, _this3.convertMillisecond(timer));\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["E:\\workspace\\React\\stop-watch\\src\\App.js"],"names":["React","Component","App","props","state","timerCount","timerData","isPaused","splitTime","bind","toggleTimer","stopWatch","setInterval","setState","clearInterval","ms","milliSeconds","seconds","minutes","parseInt","parseFloat","toFixed","display","alignItems","convertMillisecond","map","timer","index","toString"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,CADD;AAEXC,MAAAA,SAAS,EAAE,EAFA;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,uDAAnB;AARiB;AASlB;;;;wCAEmB;AAAA;;AAClB,WAAKE,SAAL,GAAiBC,WAAW,CAAC,YAAM;AACjC,YAAI,MAAI,CAACR,KAAL,CAAWG,QAAf,EAAyB;AACvB,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAACM,QAAL,CAAc;AAAER,YAAAA,UAAU,EAAE,MAAI,CAACD,KAAL,CAAWC,UAAX,GAAwB;AAAtC,WAAd;AACD;AACF,OAN2B,EAMzB,CANyB,CAA5B;AAOD;;;2CAEsB;AACrBS,MAAAA,aAAa,CAAC,KAAKH,SAAN,CAAb;AACD;;;uCAEkBI,E,EAAI;AACrB,UAAIC,YAAY,GAAGD,EAAnB;AACA,UAAIE,OAAO,GAAGD,YAAY,GAAG,IAA7B;AACA,UAAIE,OAAO,GAAGD,OAAO,GAAG,EAAxB;AAEA,uBAAUE,QAAQ,CAACD,OAAD,CAAlB,gBAAiCE,UAAU,CAACH,OAAD,CAAV,CAAoBI,OAApB,CAA4B,CAA5B,CAAjC;AACD;;;gCAEW;AACV,WAAKR,QAAL,CAAc;AACZP,QAAAA,SAAS,GAAG,KAAKF,KAAL,CAAWC,UAAd,4BAA6B,KAAKD,KAAL,CAAWE,SAAxC;AADG,OAAd;AAGD;;;kCAEa;AACZ,WAAKO,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWG;AAAxB,OAAd;AACD;;;6BAEQ;AAAA;;AAAA,wBACqC,KAAKH,KAD1C;AAAA,UACCC,UADD,eACCA,UADD;AAAA,UACaC,SADb,eACaA,SADb;AAAA,UACwBC,QADxB,eACwBA,QADxB;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAGE;AAAK,QAAA,KAAK,EAAE;AAAEe,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKC,kBAAL,CAAwBnB,UAAxB,CAAJ,CADF,EAEE;AACE,QAAA,OAAO,EAAE,KAAKG,SADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,EAME;AACE,QAAA,OAAO,EAAE,KAAKE,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEEH,QAAQ,GAAG,MAAH,GAAY,OAFtB,CANF,CAHF,EAcGD,SAAS,CAACmB,GAAV,CAAc,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC/B,eAAO;AACL,UAAA,GAAG,EAAEA,KAAK,CAACC,QAAN,EADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGJ,MAAI,CAACJ,kBAAL,CAAwBE,KAAxB,CAHI,CAAP;AAKD,OANA,CAdH,CADF;AAwBD;;;;EAtEezB,S;;AAyElB,eAAeC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerCount: 0,\n      timerData: [],\n      isPaused: true\n    }\n    this.splitTime = this.splitTime.bind(this);\n    this.toggleTimer = this.toggleTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.stopWatch = setInterval(() => {\n      if (this.state.isPaused) {\n        return null;\n      } else {\n        this.setState({ timerCount: this.state.timerCount + 1 });\n      }\n    }, 1);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.stopWatch);\n  }\n\n  convertMillisecond(ms) {\n    let milliSeconds = ms;\n    let seconds = milliSeconds / 1000;\n    let minutes = seconds / 60;\n\n    return `${parseInt(minutes)} : ${parseFloat(seconds).toFixed(2)}`\n  }\n\n  splitTime() {\n    this.setState({\n      timerData: [this.state.timerCount, ...this.state.timerData]\n    });\n  }\n\n  toggleTimer() {\n    this.setState({ isPaused: !this.state.isPaused });\n  }\n\n  render() {\n    const { timerCount, timerData, isPaused } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Stop Timer Application</h1>\n\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <p>{this.convertMillisecond(timerCount)}</p>\n          <button\n            onClick={this.splitTime}\n          >split</button>\n\n          <button\n            onClick={this.toggleTimer}\n          >{isPaused ? \"play\" : \"pause\"}</button>\n        </div>\n\n        {timerData.map((timer, index) => {\n          return <p\n            key={index.toString()}\n          >\n            {this.convertMillisecond(timer)}\n          </p>\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}