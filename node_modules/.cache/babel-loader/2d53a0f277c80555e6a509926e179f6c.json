{"ast":null,"code":"import _toConsumableArray from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\workspace\\\\React\\\\stop-watch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\workspace\\\\React\\\\stop-watch\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      timerCounter: 0,\n      timerSplitData: [],\n      isPaused: true\n    };\n    _this.splitTime = _this.splitTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleTimer = _this.toggleTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.stopWatch = setInterval(function () {\n        if (_this2.state.isPaused) {\n          return null;\n        } else {\n          _this2.setState({\n            timerCounter: _this2.state.timerCounter + 1\n          });\n        }\n      }, 1);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.stopWatch);\n    }\n  }, {\n    key: \"convertMillisecond\",\n    value: function convertMillisecond(ms) {\n      var seconds = ms / 1000;\n      var minutes = seconds / 60;\n      var displayms = ms % 100 < 9 ? \"0\".concat(parseInt(ms % 100)) : parseInt(ms % 100);\n      var displaysec = seconds % 60 < 9 ? \"0\".concat(parseInt(seconds % 60)) : parseInt(seconds % 60);\n      var displaymin = minutes < 9 ? \"0\".concat(parseInt(minutes)) : parseInt(minutes);\n      return \"\".concat(displaymin, \":\").concat(displaysec, \".\").concat(displayms);\n    }\n  }, {\n    key: \"splitTime\",\n    value: function splitTime() {\n      this.setState({\n        timerSplitData: [].concat(_toConsumableArray(this.state.timerSplitData), [this.state.timerCounter])\n      });\n    }\n  }, {\n    key: \"toggleTimer\",\n    value: function toggleTimer() {\n      this.setState({\n        isPaused: !this.state.isPaused\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          timerCounter = _this$state.timerCounter,\n          timerSplitData = _this$state.timerSplitData,\n          isPaused = _this$state.isPaused;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Stop Watch Application\"), React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"timerCounter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.convertMillisecond(timerCounter)), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.splitTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"split\"), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.toggleTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, isPaused ? \"play\" : \"pause\")), timerSplitData.map(function (timer, index) {\n        return React.createElement(\"div\", {\n          className: \"timerLists\",\n          key: index.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          style: {\n            marginRight: \"30px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, index + 1), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, _this3.convertMillisecond(timer)));\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["E:\\workspace\\React\\stop-watch\\src\\App.js"],"names":["React","Component","App","props","state","timerCounter","timerSplitData","isPaused","splitTime","bind","toggleTimer","stopWatch","setInterval","setState","clearInterval","ms","seconds","minutes","displayms","parseInt","displaysec","displaymin","display","alignItems","convertMillisecond","map","timer","index","toString","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerCounter: 0,\n      timerSplitData: [],\n      isPaused: true\n    }\n    this.splitTime = this.splitTime.bind(this);\n    this.toggleTimer = this.toggleTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.stopWatch = setInterval(() => {\n      if (this.state.isPaused) {\n        return null;\n      } else {\n        this.setState({ timerCounter: this.state.timerCounter + 1 });\n      }\n    }, 1);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.stopWatch);\n  }\n\n  convertMillisecond(ms) {\n    let seconds = ms / 1000;\n    let minutes = seconds / 60;\n\n    let displayms = ms % 100 < 9 ? `0${parseInt(ms % 100)}` : parseInt(ms % 100);\n    let displaysec = (seconds % 60) < 9 ? `0${parseInt(seconds % 60)}` : (parseInt(seconds % 60));\n    let displaymin = minutes < 9 ? `0${parseInt(minutes)}` : parseInt(minutes);\n\n    return `${displaymin}:${displaysec}.${displayms}`\n  }\n\n  splitTime() {\n    this.setState({\n      timerSplitData: [...this.state.timerSplitData, this.state.timerCounter]\n    });\n  }\n\n  toggleTimer() {\n    this.setState({ isPaused: !this.state.isPaused });\n  }\n\n  render() {\n    const { timerCounter, timerSplitData, isPaused } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Stop Watch Application</h1>\n\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <p className=\"timerCounter\">{this.convertMillisecond(timerCounter)}</p>\n          <button\n            className=\"button\"\n            onClick={this.splitTime}\n          >split</button>\n\n          <button\n            className=\"button\"\n            onClick={this.toggleTimer}\n          >{isPaused ? \"play\" : \"pause\"}</button>\n        </div>\n\n        {timerSplitData.map((timer, index) => {\n          return <div className=\"timerLists\" key={index.toString()}>\n            <p style={{marginRight: \"30px\"}}>{index + 1}</p>\n            <p>{this.convertMillisecond(timer)}</p>\n          </div>\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}